# Git cheat sheet
# made while reading Pro Git book 
# http://git-scm.com/book
# v 1.0.0
# author: Melita Mihaljevic
# date Feb, 2013
# comment: this is only cheat sheet - read the book for more info

# add username and e-mail address
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

# check settings
$ git config --list

# get help <verb> - show git man page for <verb>
$ git help add      - shows git man pages for add

# initialize git repo
$ git init

# add files to repo
$ git add <filename>

# commit changes
$ git commit -m 'message about commit'

# clone project
$ git clone [url]
$ git://github.com/example/example.git

# check the status of files
$ git status

# get diff
$ git diff
$ git diff --staged     - what is staged and will go into next commit

# remove file
$ git rm <filename>

# keep the file in your working tree but remove it from your staging area
$ git rm --cached <filename>

# rename file
$ git mv file_from file_to

# view commit history
$ git log

# commit things you forgot with the last commit
$ git commit --amend

# unstage file
$ git reset HEAD <filename>

# unmodify a modified file
$ git checkout -- <filename>

# which remote servers you have configured
$ git remote -v

# add remote repository
$ git remote add [shortname] [url]

# fetch information from remote repository
$ git fetch [shortname]

# automatically fetch and then merge a remote branch into your current branch
$ git pull

# automatically sets up your local master branch to track the remote master branch on the server you cloned from
$ git clone

# push to server
$ git push [remote-name] [branch-name]

# see more information about a particular remote
$ git remote show [remote-name]

# rename remote reference
$ git remote rename name1 name2

# remove remote reference
$ git remote rm name

# list available tags
$ git tag

# create annotated tag
$ git tag -a [version] -m [message]

# share tag
$ git push origin [tagname]

# create a branch and switch to it at the same time
$ git checkout -b [branch name]

# merge to master
$ git checkout master
$ git merge [branch name]
$ git branch -d [branch name]   - delete after merging cause you don't need it anymore

# merge tool 
$ git mergetool

# delete remote branch
$ git push [remotename] :[branch]

# check for whitespace errors
$ git diff --check

# squash to a single commit
$ git rebase -i

# when was each line edited and by whom
$ git blame

# binary search through your commit history to help you identify as quickly as possible which commit introduced an issue
$ git bisect start
$ git bisect bad
$ git bisect good v1.0


